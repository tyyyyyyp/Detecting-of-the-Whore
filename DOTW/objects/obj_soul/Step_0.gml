// Movement
var _key_left = keyboard_check(ord("A"));
var _key_right = keyboard_check(ord("D"));
var _key_up = keyboard_check(ord("W"));
var _key_down = keyboard_check(ord("S"));

var _min_x = 100;
var _max_x = 1000;
var _min_y = 200;
var _max_y = 800;

var _hdir = _key_right - _key_left;
var _vdir = _key_down - _key_up;

if (_hdir != 0 or _vdir != 0) {
    var _ang = point_direction(0, 0, _hdir, _vdir);
    var _x = lengthdir_x(move_speed, _ang);
    var _y = lengthdir_y(move_speed, _ang);
    x += _x;
    y += _y;
}
x = clamp(x, _min_x, _max_x);
y = clamp(y, _min_y, _max_y);

// Health Regeneration (Limit Health Regeneration)
if (health < max_health) {
    health += health_regen_rate;  // Regenerate health
    health = min(health, max_health);  // Ensure health doesn't exceed max_health
}

// Mana Regeneration
mana = min(mana + mana_regen_rate, max_mana);  // Ensure mana doesn't exceed max_mana

// Damage Handling
if (health > 0) {
    // Health and damage logic
    // This part handles the damage logic (like from bullets or other sources)
}

// –û–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫
hurt_cooldown += 1;

// –Ø–∫—â–æ –∫—É–ª–¥–∞—É–Ω –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É—Ä–æ–Ω—É
if (hurt_cooldown >= hurt_time) {
    hurt_cooldown = 0;  // –°–∫–∏–¥–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —á–∞—Å—É
}

// –î–æ–¥–∞—î–º–æ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É—Ä–æ–Ω—É –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ –∑ –∫—É–ª–µ—é
if (place_meeting(x, y, obj_bullet)) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–π—à–æ–≤ –∫—É–ª–¥–∞—É–Ω
    if (hurt_cooldown == 0) {
        // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —É—Ä–æ–Ω
        health -= 10;  // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ 10 –≤—ñ–¥ –∑–¥–æ—Ä–æ–≤'—è
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª–¥–∞—É–Ω
        hurt_cooldown = 1; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª–¥–∞—É–Ω –ø—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É—Ä–æ–Ω—É
    }
}


// Interaction with Magic Button
var distance_to_button = point_distance(x, y, obj_button_magic.x, obj_button_magic.y);
if (distance_to_button <= 50) {
    draw_set_color(c_yellow);
    draw_circle(obj_button_magic.x, obj_button_magic.y, 10, false);
}

// Ensure health never goes below 0
health = max(health, 0);

// Dash variables
var dash_cooldown = 0;         // Dash cooldown timer
var dash_time = 5 * room_speed; // Cooldown in frames (5 seconds)
var dash_mana_cost = 10;       // Mana cost for dash
var dash_speed = 10;           // Speed multiplier for dash (adjust as needed)

// Bar Variables (for the cooldown display)
var cooldown_bar_width = 100;  // Width of the cooldown bar
var bar_height = 10;           // Height of the cooldown bar

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –ø–æ—â–∞–¥–∂–µ–Ω–Ω—è –≤–æ—Ä–æ–≥–∞
if (distance_to_object(obj_button_free) < 50 && keyboard_check_pressed(ord("E"))) {
    // –ó–Ω–∞–π—Ç–∏ –≤–æ—Ä–æ–≥–∞
    var target = instance_find(obj_enemy, 0);  // –ó–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–∏–π –æ–±'—î–∫—Ç obj_enemy –Ω–∞ —Å—Ü–µ–Ω—ñ
    if (target != noone) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤ –º–æ–Ω—Å—Ç—Ä–∞ HP –º–µ–Ω—à–µ 35
        if (target.hp < 35) {
            // –ü–æ—â–∞–¥–∏—Ç–∏ –º–æ–Ω—Å—Ç—Ä–∞
            target.hp = 0;  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –º–æ–Ω—Å—Ç—Ä –ø–æ—â–∞–¥–∂–µ–Ω–∏–π (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è)

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä –ø—ñ—Å–ª—è –ø–æ—â–∞–¥–∂–µ–Ω–Ω—è –º–æ–Ω—Å—Ç—Ä–∞
            instance_create_layer(400, 300, "Instances", obj_trigger_exit);  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–∏–≥–µ—Ä –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º—ñ—Å—Ü—ñ
        } else {
            // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π –∫–æ–¥, —è–∫—â–æ –º–æ–Ω—Å—Ç—Ä –º–∞—î –±—ñ–ª—å—à–µ 35 HP (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
          
        }
    }
}


// üîê –Ø–∫—â–æ –º–∞–≥—ñ—è —â–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ ‚Äî —á–µ–∫–∞—î–º–æ
if (magic_locked) {
    magic_lock_timer -= 1;
    if (magic_lock_timer <= 0) {
        magic_locked = false;
        show_debug_message("–ú–∞–≥—ñ—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∞");
    }
}

// ‚öîÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ç–∞–∫–∏
if (!attack_pending && !magic_locked && distance_to_object(obj_button_magic) < 50 && keyboard_check_pressed(ord("E"))) {
    var target = instance_find(obj_enemy, 0);
    if (target != noone && mana >= 20) {
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –µ—Ñ–µ–∫—Ç
        instance_create_layer(1165, 410, "Effects", obj_attack_effect);

        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ —Ü—ñ–ª—å
        attack_pending = true;
        attack_timer = room_speed; // 1 —Å–µ–∫—É–Ω–¥–∞
        attack_target = target;

        // üîê –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
        magic_locked = true;
        magic_lock_timer = room_speed * 10;
        show_debug_message("–ú–∞–≥—ñ—è –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥");
    }
}

// ‚è≥ –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É
if (attack_pending) {
    attack_timer -= 1;

    if (attack_timer <= 0) {
        if (instance_exists(attack_target)) {
            attack_target.hp -= 10;
            mana -= 20;

            // –Ø–∫—â–æ –≤–æ—Ä–æ–≥ –º–µ—Ä—Ç–≤–∏–π ‚Äî —Ç—Ä–∏–≥–µ—Ä
            if (attack_target.hp <= 0) {
                instance_create_layer(800, 400, "Instances", obj_trigger_exit);
            }
        }
        attack_pending = false;
    }
}
// –ö—É–ª–¥–∞—É–Ω —Ö—ñ–ª–∫–∏
if (heal_locked) {
    heal_lock_timer -= 1;
    if (heal_lock_timer <= 0) {
        heal_locked = false;
        show_debug_message("–•—ñ–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!");
    }
}

// –•—ñ–ª–∫–∞, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫—É–ª–¥–∞—É–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π
if (!heal_locked &&  distance_to_object(obj_button_heal) < 50 && keyboard_check_pressed(ord("E"))) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–Ω–∏
    if (mana >= 20) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —â–æ –ª—ñ–∫—É–≤–∞—Ç–∏
        if (health < 100) {
            // –í–∏–∫–æ–Ω—É—î–º–æ —Ö—ñ–ª–∫—É
            mana -= 20;
            health = min(health + 30, 100);
            audio_play_sound(snd_heal, 0, false);

            // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫—É–ª–¥–∞—É–Ω —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å–ø—Ä–∞–≤–¥—ñ —Ö—ñ–ª–∫–∞ –ø—Ä–æ–π—à–ª–∞
            heal_locked = true;
            heal_lock_timer = room_speed * 10;

        } else {
            show_debug_message("–ó–¥–æ—Ä–æ–≤'—è –≤–∂–µ –ø–æ–≤–Ω–µ ‚Äî –Ω–µ —Ö—ñ–ª–∏–º–æ—Å—å.");
        }
    } else {
        show_debug_message("–ù–µ–º–∞ –º–∞–Ω–∏ –¥–ª—è —Ö—ñ–ª–∫–∏.");
    }
}
